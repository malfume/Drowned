local Library =
	loadstring(game:HttpGet("https://raw.githubusercontent.com/MimiTest2/project-rain-assets/main/gayd.lua"))()
local ThemeManager = loadstring(
	game:HttpGet("https://raw.githubusercontent.com/MimiTest2/LinoriaLib/main/uploads/ThemeManagerNew.lua")
)()
local SaveManager =
	loadstring(game:HttpGet("https://raw.githubusercontent.com/MimiTest2/LinoriaLib/main/uploads/SaveManagerTwo.lua"))()

local placeId = tostring(game.PlaceId)
local titleMap = {
	["14070029709"] = "Drowned Hub - Game Soul Society",
	["14071822972"] = "Drowned Hub - Game Wandenreich City",
	["14069122388"] = "Drowned Hub - Game Hueco Mundo",
	["14069678431"] = "Drowned Hub - Game Karakura Town",
	["14069866342"] = "Drowned Hub - Game Las Noches",
	["14069956183"] = "Drowned Hub - Game Rukon District",
}

local title = titleMap[placeId] or "Drowned Hub - Game ID: " .. placeId

getgenv().AutoEat = false
local Window = Library:CreateWindow({
	Title = title,
	Center = true,
	AutoShow = true,
	TabPadding = 8,
	MenuFadeTime = 0.2,
})

local Tabs = {
	Mainbutreal = Window:AddTab("Main"),
	["UI Settings"] = Window:AddTab("UI Settings"),
}

--// Script Functions

local Settings = {
	Farms = {
		LootFarm = false,
		MobFarm = false,
		Selectedmob = "Frisker",
		Position = 6,
		TweenSpeed = 100,
		Autoequip = false,
	},
	Teleports = {
		Selectednpc = "",
	},
	Autoquest = {
		Toggle = false,
		Questboard = "MissionBoard 12",
		Position = 0,
	},
	Shikaifight = {
		Toggle = false,
		Position = 6,
	},
	Adjfarm = {
		Toggle = false,
		Position = -8.7,
	},
	Closest = {
		Toggle = false,
		Position = -8,
		Distance = 150,
	},
	Notifier = false,
	Minigame = false,
	Obby = false,
}

local Settings2 = {
	Farms = {
		MobFarm = false,
		Selectedmob = "Frisker",
		Position = math.random(-1, 5),
		TweenSpeed = 100,
		Autoequip = false,
	},
	Teleports = {
		Selectednpc = "",
	},
	Autoquest = {
		Toggle = false,
		Questboard = "MissionBoard 12",
		Position = 0,
	},
	Shikaifight = {
		Toggle = false,
		Position = 6,
	},
	Adjfarm = {
		Toggle = false,
		Position = -8.7,
	},
	Closest = {
		Toggle = false,
		Position = 0,
		Distance = 150,
	},
	Notifier = false,
	Minigame = false,
	Obby = false,
}

local attackremote = game:GetService("ReplicatedStorage").Remotes.ServerCombatHandler
local mobTable = { "Fishbone", "Frisker", "LostSoul", "Jackal", "Shinigami", "Menos", "Bawabawa", "Jidanbo" }
local RunService = game:GetService("RunService")
local NextFrame = RunService.Heartbeat
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local ForceStop = false
local npcTable = {}
local player = game.Players.LocalPlayer
local questTable = { "nothing" }
local name = player.Name

local function Tween(Target, angle)
	ForceStop = false
	if typeof(Target) == "Instance" and Target:IsA("BasePart") then
		Target = Target.Position
	end
	if typeof(Target) == "CFrame" then
		Target = Target.p
	end

	local HRP = (Player.Character and Player.Character:FindFirstChild("HumanoidRootPart"))
	if not HRP then
		return
	end

	local StartingPosition = HRP.Position
	local PositionDelta = (Target - StartingPosition)
	local StartTime = tick()
	local TotalDuration = (StartingPosition - Target).magnitude / Settings.Farms.TweenSpeed

	repeat
		NextFrame:Wait()
		local Delta = tick() - StartTime
		local Progress = math.min(Delta / TotalDuration, 1)

		local MappedPosition = StartingPosition + (PositionDelta * Progress)
		HRP.Velocity = Vector3.new()
		HRP.CFrame = CFrame.new(MappedPosition)
	until (HRP.Position - Target).magnitude <= Settings.Farms.TweenSpeed / 2 or ForceStop
	if ForceStop then
		ForceStop = false
		return
	end --
	HRP.Anchored = false
	HRP.CFrame = CFrame.new(Target) * CFrame.Angles(math.rad(angle), 0, 0)
end

for i, v in pairs(workspace.NPCs:GetDescendants()) do
	if v:IsA("Model") and not table.find(npcTable, v.Name) then
		table.insert(npcTable, v.Name)
	end
end

for i, v in pairs(workspace.NPCs.MissionNPC:GetChildren()) do
	if v:IsA("Model") and not table.find(questTable, v.Name) then
		table.insert(questTable, v.Name)
	end
end

local function tweentonpc()
	for i, v in pairs(workspace.NPCs:GetDescendants()) do
		if v:IsA("Model") and v.Name == Settings.Teleports.Selectednpc then
			Tween(v:GetPivot().Position, 0)
		end
	end
end

local function stoptween()
	ForceStop = true
end

local findmob = function()
	local MaxDistance = math.huge
	local find = nil
	for i, v in pairs(workspace.Entities:GetChildren()) do
		if
			string.find(v.Name, Settings.Farms.Selectedmob)
			and v:FindFirstChild("HumanoidRootPart")
			and v.Humanoid.Health > 0
		then
			local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
			if magnitude < MaxDistance then
				MaxDistance = magnitude
				find = v
			end
		else
			print("No mob found")
		end
	end
	return find
end

local findmob2 = function()
	local MaxDistance = math.huge
	local find = nil
	for i, v in pairs(workspace.Entities:GetChildren()) do
		if
			string.find(v.Name, Settings2.Farms.Selectedmob)
			and v:FindFirstChild("HumanoidRootPart")
			and v.Humanoid.Health > 0
		then
			local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
			if magnitude < MaxDistance then
				MaxDistance = magnitude
				find = v
			end
		else
			print("No mob found")
		end
	end
	return find
end

local findlootbox = function()
	local MaxDistance = math.huge
	local find = nil
	for i, v in pairs(workspace.Lootboxes:GetChildren()) do
		local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
		if magnitude < MaxDistance then
			MaxDistance = magnitude
			find = v
		end
	end
	if find == nil then
		print("No loot box found")
	end
	return find
end

local function MobFarm()
	if Settings.Farms.MobFarm then
		if Settings.Farms.Position >= 0 then
			local mob = findmob()
			Tween(mob:GetPivot().Position + Vector3.new(0, Settings.Farms.Position, 0), -90)
			if (mob:GetPivot().Position - player.Character:GetPivot().Position).magnitude <= 15 then
				Tween(mob:GetPivot().Position + Vector3.new(0, Settings.Farms.Position, 0), -90)
				attackremote:FireServer("LightAttack")
			end
		else
			local mob = findmob()
			Tween(mob:GetPivot().Position + Vector3.new(0, Settings.Farms.Position, 0), 90)
			if (mob:GetPivot().Position - player.Character:GetPivot().Position).magnitude <= 15 then
				Tween(mob:GetPivot().Position + Vector3.new(0, Settings.Farms.Position, 0), 90)
				attackremote:FireServer("LightAttack")
			end
		end
	end
end
local function MobFarm2()
    if Settings2.Farms.MobFarm then
        local mob = findmob2()
        local direction = (mob:GetPivot().Position - player.Character:GetPivot().Position).Y >= 0 and 90 or -90
        Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position, 0), direction)
        if (mob:GetPivot().Position - player.Character:GetPivot().Position).magnitude <= 15 then
            if getgenv().lol11111 and mob.Health == 0 then
                game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Execute:FireServer()
                wait(5)
            else
                Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position, 0), direction)
                attackremote:FireServer("LightAttack")
            end
        end
    end
end

local function LootBoxFarm()
	if Settings.Farms.LootFarm then
		if Settings2.Farms.Position >= 0 then
			local mob = findlootbox()
			Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position, 0), -90)
			if (mob:GetPivot().Position - player.Character:GetPivot().Position).magnitude <= 15 then
				Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position, 0), -90)
			end
		else
			local mob = findlootbox()
			Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position, 0), 90)
			if (mob:GetPivot().Position - player.Character:GetPivot().Position).magnitude <= 15 then
				Tween(mob:GetPivot().Position + Vector3.new(0, Settings2.Farms.Position - Vector3.new(0, 5, 0), 0), 90)
			end
		end
	end
end

local near = function()
	if not Settings.Autoquest.Toggle then
		return
	end
	if player.PlayerGui.QueueUI.Enabled == true then
		local distance = math.huge
		local z = nil
		for i, v in pairs(workspace.Entities:GetChildren()) do
			if
				string.find(v.Name, "Fishbone")
				or string.find(v.Name, "Frisker")
				or string.find(v.Name, "Shinigami")
			then
				if v.Humanoid.Health > 0 and v:FindFirstChild("Highlight") then
					local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
					if magnitude < distance then
						distance = magnitude
						z = v
					end
				end
			end
		end
		return z
	end
end

local questboard = function()
	if not Settings.Autoquest.Toggle then
		return
	end
	if player.PlayerGui.MissionsUI.Queueing.Visible == false and player.PlayerGui.QueueUI.Enabled == false then
		local distance = math.huge
		local quest
		for i, v in pairs(workspace.NPCs.MissionNPC:GetChildren()) do
			if string.find(v.Name, "MissionBoard") then
				local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
				if magnitude < distance then
					distance = magnitude
					quest = v
				end
			end
		end
		return quest
	end
end

--player.PlayerGui.MissionsUI.Queueing.Visible == false

local function autoquest()
	if not Settings.Autoquest.Toggle then
		return
	end
	player.Character.Humanoid:ChangeState("FreeFall")
	if player.PlayerGui.QueueUI.Enabled == true then
		local dummy = near()
		if Settings.Autoquest.Position >= 0 then
			Tween(dummy:GetPivot().Position + Vector3.new(0, Settings.Autoquest.Position, 0), -90)
			if (player.Character:GetPivot().Position - dummy:GetPivot().Position).Magnitude < 25 then
				Tween(dummy:GetPivot().Position + Vector3.new(0, Settings.Autoquest.Position, 0), -90)
				attackremote:FireServer("LightAttack")
			end
		else
			Tween(dummy:GetPivot().Position + Vector3.new(0, Settings.Autoquest.Position, 0), 90)
			if (player.Character:GetPivot().Position - dummy:GetPivot().Position).Magnitude < 25 then
				Tween(dummy:GetPivot().Position + Vector3.new(0, Settings.Autoquest.Position, 0), 90)
				attackremote:FireServer("LightAttack")
			end
		end
	elseif player.PlayerGui.QueueUI.Enabled == false then
		if player.PlayerGui.MissionsUI.Queueing.Visible == false then
			local quest = questboard()
			local magnitude = (player.Character:GetPivot().Position - quest:GetPivot().Position).Magnitude
			Tween(quest:GetPivot().Position + Vector3.new(0, -8, 0), 0)
			if magnitude < 15 then
				Tween(quest:GetPivot().Position + Vector3.new(0, -8, 0), 0)
				task.wait()
				fireclickdetector(quest.Board.Union.ClickDetector)
				task.wait()
				player[quest.Name]:FireServer("Yes")
			end
		end
	end
end

local function streamermode() -- hides your user on the party list
	player.PlayerGui.MissionsUI.MainFrame.ScrollingFrame[name].PlayerName.Text = "Asteria on top"
end

local function destroykillbricks()
	for i, v in pairs(workspace.DeathBricks:GetChildren()) do
		v:Destroy()
	end
end
local function instantreset()
	player.Character.Head:Destroy()
end

local function chatlogger()
	loadstring(game:HttpGet("https://raw.githubusercontent.com/mac2115/Cool-private/main/ESP", true))()
end

local function Teleport()
	if game.PlaceId == 14071822972 then
		for i, v in
			pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Wandenreich City"))
		do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Wandenreich City", v.JobID)
				break
			end
		end
	elseif game.PlaceId == 14070029709 then
		for i, v in pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Soul Society")) do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Soul Society", v.JobID)
				break
			end
		end
	elseif game.PlaceId == 14069122388 then
		for i, v in pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Hueco Mundo")) do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Hueco Mundo", v.JobID)
				break
			end
		end
	elseif game.PlaceId == 14069678431 then
		for i, v in pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Karakura Town")) do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Karakura Town", v.JobID)
				break
			end
		end
	elseif game.PlaceId == 14069866342 then
		for i, v in pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Las Noches")) do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Las Noches", v.JobID)
				break
			end
		end
	elseif game.PlaceId == 14069956183 then
		for i, v in
			pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer("Rukon District"))
		do
			if v.JobID ~= game.JobId then
				wait()
				player.Character.CharacterHandler.Remotes.ServerListTeleport:FireServer("Rukon District", v.JobID)
				break
			end
		end
	end
end

local function autoequip()
	spawn(function()
		if not Settings.Farms.Autoequip then
			return
		end
		if player.Character:FindFirstChild("Zanpakuto") then
			player.Character.CharacterHandler.Remotes.Weapon:FireServer("UnsheatheWeapon")
		else
			return
		end
	end)
end

local function farmclosest()
	if not Settings.Closest.Toggle then
		return
	end
	local distance = Settings.Closest.Distance
	for i, v in pairs(workspace.Entities:GetChildren()) do
		if v.Humanoid.Health > 0 and v ~= player.Character then
			local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).magnitude
			if magnitude <= distance then
				player.Character.Humanoid:ChangeState("FreeFall")
				if Settings.Closest.Position >= 0 then
					Tween(v:GetPivot().Position + Vector3.new(0, Settings.Closest.Position, 0), -90)
					attackremote:FireServer("LightAttack")
				else
					Tween(v:GetPivot().Position + Vector3.new(0, Settings.Closest.Position, 0), 90)
					attackremote:FireServer("LightAttack")
				end
			end
		end
	end
end

local adju = function()
	if not Settings.Adjfarm.Toggle then
		return
	end
	local distance = math.huge
	local q
	for i, v in pairs(workspace.Entities:GetChildren()) do
		if string.find(v.Name, "Jackal") and v:FindFirstChild("HumanoidRootPart") then
			local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude
			if magnitude < distance then
				distance = magnitude
				q = v
			end
		end
	end
	return q
end

local function adjufarm()
	if not Settings.Adjfarm.Toggle then
		return
	end
	local v = adju()
	if v == nil then
		Teleport()
	else
		player.Character.Humanoid:ChangeState("FreeFall")
		if v.Humanoid.Health > 0 then
			if Settings.Adjfarm.Position >= 0 then
				Tween(v:GetPivot().Position + Vector3.new(0, Settings.Adjfarm.Position, 0), -90)
				if (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude < 25 then
					Tween(v:GetPivot().Position + Vector3.new(0, Settings.Adjfarm.Position, 0), -90)
					attackremote:FireServer("LightAttack")
				end
			else
				Tween(v:GetPivot().Position + Vector3.new(0, Settings.Autoquest.Position, 0), 90)
				if (player.Character:GetPivot().Position - v:GetPivot().Position).Magnitude < 25 then
					Tween(v:GetPivot().Position + Vector3.new(0, Settings.Adjfarm.Position, 0), 90)
					attackremote:FireServer("LightAttack")
				end
			end
		elseif v.Humanoid.Health == 0 then
			Teleport()
		end
	end
end

local function shikaichecker() end

local function obby()
	if not Settings.Obby then
		return
	end
	for i, v in pairs(workspace.PartialRes.PartialResObby:GetChildren()) do
		if v.Name == "PartialObject" then
			local magnitude = (player.Character:GetPivot().Position - v:GetPivot().Position).magnitude
			Tween(v:GetPivot().Position, 0)
			if magnitude <= 15 then
				Tween(v:GetPivot().Position, 0)
				fireclickdetector(v.ClickDetector)
			end
		end
	end
end

local function minigame()
	if not Settings.Minigame then
		return
	end
	if player.PlayerGui:FindFirstChild("Division11Minigame") then
		for i, v in pairs(player.PlayerGui.Division11Minigame.Frame:GetChildren()) do
			if string.find(v.Name, "HollowImage") and v:FindFirstChild("UISizeConstraint") then
				v.UISizeConstraint.MaxSize = Vector2.new(1000, 1000)
				v.UISizeConstraint.MinSize = Vector2.new(1000, 1000)
			end
		end
	else
		fireclickdetector(workspace.NPCs.DivisionDuties["Division Duties 12"].Board.Click.ClickDetector)
		player:FindFirstChild("Division Duties 12"):FireServer("Yes")
	end
end

local Z0 = Tabs.Mainbutreal:AddLeftGroupbox("Movement")
local Z1 = Tabs.Mainbutreal:AddLeftGroupbox("AutoHits")
local Z2 = Tabs.Mainbutreal:AddRightGroupbox("Other Utils")
local Z3 = Tabs.Mainbutreal:AddLeftGroupbox("Farm Utils")

local TabBox = Tabs.Mainbutreal:AddRightTabbox()
local Z4 = TabBox:AddTab("Visuals")

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/Texchy/Esp/main/Esp.lua"))()

getgenv().ESP.Main.Enabled = false
getgenv().ESP.Main.Box.Enabled = false
getgenv().ESP.Main.Name.Color = Color3.fromRGB(242, 243, 243)
getgenv().ESP.Main.Box.BoxColor = Color3.fromRGB(242, 243, 243)
getgenv().ESP.Main.Box.BoxFillColor = Color3.fromRGB(242, 243, 243)
getgenv().ESP.Main.Tool.Color = Color3.fromRGB(242, 243, 243)
getgenv().ESP.Main.Distance.Color = Color3.fromRGB(242, 243, 243)
getgenv().ESP.Extra.UseDisplayName = false

Z4:AddToggle("MyToggle", {
	Text = "Player Esp",
	Default = false,
	Tooltip = "Esp player",
	Callback = function(value)
getgenv().ESP.Main.Enabled = value
    end
})

Z4:AddToggle("MyToggle", {
	Text = "Boxes",
	Default = false,
	Tooltip = "Shows boxes for esp",
	Callback = function(State)
		getgenv().ESP.Main.Box.Enabled = State
	end,
})

Z4:AddLabel("Color"):AddColorPicker("ColorPicker", {
	Default = Color3.new(0, 1, 0), -- Bright green
	Title = "Esp Color", 
	Transparency = 0, 

	Callback = function(Color3)
	getgenv().ESP.Main.Name.Color = Color3
	getgenv().ESP.Main.Box.BoxColor = Color3
	getgenv().ESP.Main.Box.BoxFillColor = Color3
	getgenv().ESP.Main.Tool.Color = Color3
	getgenv().ESP.Main.Distance.Color = Color3
	end,
})

getgenv().espToggled = false

local function createBillboardGui(model, mobName)
	local billboardGui = Instance.new("BillboardGui")
	billboardGui.Name = "MobEsp"
	billboardGui.Size = UDim2.new(0, 100, 0, 100) -- Adjusted size
	billboardGui.AlwaysOnTop = true
	billboardGui.MaxDistance = 1000

	local nameLabel = Instance.new("TextLabel")
	nameLabel.Size = UDim2.new(1, 0, 0.3, 0) -- Adjusted size
	nameLabel.Position = UDim2.new(0, 0, 0, 0) -- Position at the top
	nameLabel.BackgroundTransparency = 1
	nameLabel.TextStrokeTransparency = 0.5
	nameLabel.TextColor3 = Color3.new(1, 0, 0)
	nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
	nameLabel.Text = mobName
	nameLabel.Parent = billboardGui

	local healthLabel = Instance.new("TextLabel")
	healthLabel.Size = UDim2.new(1, 0, 0.7, 0) -- Adjusted size
	healthLabel.Position = UDim2.new(0, 0, 0.3, 0) -- Adjusted position
	healthLabel.BackgroundTransparency = 1
	healthLabel.TextStrokeTransparency = 0.5
	healthLabel.TextColor3 = Color3.new(1, 0, 0)
	healthLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
	local humanoid = model:WaitForChild("Humanoid")
	if humanoid then
		healthLabel.Text = "Health: " .. humanoid.Health

		-- Update health when it changes
		humanoid.HealthChanged:Connect(function(newHealth)
			healthLabel.Text = "Health: " .. newHealth
		end)
	end
	healthLabel.Parent = billboardGui

	return billboardGui
end

local function updateEsp(model)
	if getgenv().espToggled then
		for _, mobName in ipairs(mobTable) do
			if string.find(model.Name, mobName) then
				local billboardGui = model:FindFirstChild("MobEsp")
				if not billboardGui then
					billboardGui = createBillboardGui(model, mobName)
					billboardGui.Parent = model
				end
			end
		end
	else
		local billboardGui = model:FindFirstChild("MobEsp")
		if billboardGui then
			billboardGui:Remove()
		end
	end
end

Z4:AddToggle("MyToggle", {
    Text = "Mob Esp",
    Default = false,
    Tooltip = "Esp Mobs",
    Callback = function(value)
        getgenv().espToggled = value
        local mobfolder = workspace.Entities
        for _, model in ipairs(mobfolder:GetChildren()) do
            updateEsp(model)
        end
    end,
})

workspace.Entities.ChildAdded:Connect(function(model)
    if getgenv().espToggled then
        updateEsp(model)
    end
end)

workspace.Entities.ChildRemoved:Connect(function(model)
    local billboardGui = model:FindFirstChild("MobEsp")
    if billboardGui then
        billboardGui:Remove()
    end
end)

local AdvancedSpeedModdes = "Velocity"
local AdvancedSpeedVal = 125
local SpeedKeepJump = false
local SpeedKeepJumpReal = false
local SpeedWallCheck = false
local SpeedBypassDelay = 1.103300000000001
local SpeedBypassDuration = 2.5178200000000004
local FakeJumpHeight = 6

players = game:GetService("Players")
speaker = players.LocalPlayer or player:GetPropertyChangedSignal("LocalPlayer"):Wait() and players.LocalPlayer
Mouse = speaker:GetMouse()
char = speaker.Character or speaker.CharacterAdded:Wait()

workspace = game:GetService("Workspace")
Camera = workspace.CurrentCamera

CGUI = game:GetService("CoreGui")
SGUI = game:GetService("StarterGui")
GUIS = game:GetService("GuiService")
ChatService = game:GetService("Chat")
Lighting = game:GetService("Lighting")
UIS = game:GetService("UserInputService")
DebrisService = game:GetService("Debris")
RunService = game:GetService("RunService")
MS = game:GetService("MarketplaceService")
HttpService = game:GetService("HttpService")
CAS = game:GetService("ContextActionService")
SoundService = game:GetService("SoundService")
TweenService = game:GetService("TweenService")
NetworkClient = game:GetService("NetworkClient")
TeleportService = game:GetService("TeleportService")
textChatService = game:GetService("TextChatService")
MaterialService = game:GetService("MaterialService")
ReplicatedStorage = game:GetService("ReplicatedStorage")
PathfindingService = game:GetService("PathfindingService")
ProximityPromptService = game:GetService("ProximityPromptService")

local RunLoops = {
	RenderStepTable = {},
	StepTable = {},
	HeartTable = {},
}

do
	function RunLoops:BindToRenderStep(name, func)
		if RunLoops.RenderStepTable[name] == nil then
			RunLoops.RenderStepTable[name] = RunService.RenderStepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromRenderStep(name)
		if RunLoops.RenderStepTable[name] then
			RunLoops.RenderStepTable[name]:Disconnect()
			RunLoops.RenderStepTable[name] = nil
		end
	end

	function RunLoops:BindToStepped(name, func)
		if RunLoops.StepTable[name] == nil then
			RunLoops.StepTable[name] = RunService.Stepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromStepped(name)
		if RunLoops.StepTable[name] then
			RunLoops.StepTable[name]:Disconnect()
			RunLoops.StepTable[name] = nil
		end
	end

	function RunLoops:BindToHeartbeat(name, func)
		if RunLoops.HeartTable[name] == nil then
			RunLoops.HeartTable[name] = RunService.Heartbeat:Connect(func)
		end
	end

	function RunLoops:UnbindFromHeartbeat(name)
		if RunLoops.HeartTable[name] then
			RunLoops.HeartTable[name]:Disconnect()
			RunLoops.HeartTable[name] = nil
		end
	end
end

function r15(plr)
	if plr.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15 then
		return true
	end
end
function getRoot(char)
	local rootPart = char:FindFirstChild("HumanoidRootPart")
		or char:FindFirstChild("Torso")
		or char:FindFirstChild("UpperTorso")
	return rootPart
end
function tools(plr)
	if
		plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool")
		or plr.Character:FindFirstChildOfClass("Tool")
	then
		return true
	end
end
function isNumber(num)
	if tonumber(num) ~= nil or num == "inf" then
		return true
	end
end
function copyTool(path)
	for i, c in pairs(path:GetDescendants()) do
		if c:IsA("Tool") or c:IsA("HopperBin") then
			c:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
		end
		copyTool(c)
	end
end
function findTouchInterest(tool)
	return tool and tool:FindFirstChildWhichIsA("TouchTransmitter", true)
end
function say(message)
	ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents")
		:WaitForChild("SayMessageRequest")
		:FireServer(message, "All")
end
function isAlive()
	if getRoot(speaker.Character) then
		return true
	end
end

local SpeedToggleState = false
AdvancedSpede = false
getgenv().Speed = false

Z0
	:AddToggle("MyToggle", {
		Text = "Speed",
		Default = false,
		Tooltip = "",
		Callback = function(Value)
			SpeedToggleState = Value
			if Value then
				local BypassTick = tick()
				task.spawn(function()
					repeat
						BypassTick = tick() + (SpeedBypassDuration / 100)
						task.wait((SpeedBypassDelay / 10) + (SpeedBypassDuration / 100))
					until AdvancedSpede == false
				end)

				RunLoops:BindToHeartbeat("AdvancedSpeed", function(dt)
					if not getRoot(speaker.Character) then
						return
					end

					local Speed = AdvancedSpeedVal
					local Humanoid = speaker.character.Humanoid
					local RootPart = speaker.character:WaitForChild("HumanoidRootPart")
					local MoveDirection = Humanoid.MoveDirection
					local Velocity = RootPart.Velocity
					local X, Z = MoveDirection.X * Speed, MoveDirection.Z * Speed

					if AdvancedSpeedModdes == "Velocity" then
						RootPart.Velocity = Vector3.new(X, Velocity.Y, Z)
					elseif AdvancedSpeedModdes == "CFrame" then
						local Factor = Speed - Humanoid.WalkSpeed
						local MoveDirection = (MoveDirection * Factor) * dt
						local newpos = (
							MoveDirection * (math.max(Speed - speaker.character.Humanoid.WalkSpeed, 0) * dt)
						)
						if SpeedWallCheck == true then
							local ray =
								workspace:Raycast(speaker.character.HumanoidRootPart.Position, newpos, SpeedRaycast)
							if ray then
								newpos = (ray.Position - speaker.character.HumanoidRootPart.Position)
							end
						end

						RootPart.CFrame = RootPart.CFrame + newpos
					elseif AdvancedSpeedModdes == "Linear Velocity" then
						LinearVelocity = speaker.character.HumanoidRootPart:FindFirstChildOfClass("LinearVelocity")
							or Instance.new("LinearVelocity", speaker.character.HumanoidRootPart)
						LinearVelocity.VelocityConstraintMode = Enum.VelocityConstraintMode.Line
						LinearVelocity.Attachment0 =
							speaker.character.HumanoidRootPart:FindFirstChildOfClass("Attachment")
						LinearVelocity.MaxForce = 9e9
						LinearVelocity.LineDirection = MoveDirection
						LinearVelocity.LineVelocity = (MoveDirection.X ~= 0 and MoveDirection.Z) and Speed or 0
					elseif AdvancedSpeedModdes == "ASM Linear Velocity" then
						RootPart.AssemblyLinearVelocity = Vector3.new(X, Velocity.Y, Z)
					elseif AdvancedSpeedModdes == "Body Velocity" then
						BodyVelocity = speaker.character.HumanoidRootPart:FindFirstChildOfClass("BodyVelocity")
							or Instance.new("BodyVelocity", speaker.character.HumanoidRootPart)
						BodyVelocity.Velocity = Vector3.new(X, 2, Z)
						BodyVelocity.MaxForce = Vector3.new(9e9, 0, 9e9)
					elseif AdvancedSpeedModdes == "Bypass" then
						local pulsenum = (SpeedBypassDuration / 100)
						local newvelo = MoveDirection
							* (
								Speed
								+ (speaker.character.Humanoid.WalkSpeed - Speed)
									* (1 - (math.max(BypassTick - tick(), 0)) / pulsenum)
							)
						RootPart.Velocity = Vector3.new(newvelo.X, RootPart.Velocity.Y, newvelo.Z)
					end

					if SpeedKeepJump == true then
						local State = speaker.character.Humanoid:GetState()
						local MoveDirection = speaker.character.Humanoid.MoveDirection
						if State == Enum.HumanoidStateType.Running and MoveDirection ~= Vector3.zero then
							if SpeedKeepJumpReal == true then
								speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
							else
								speaker.character.HumanoidRootPart.Velocity = Vector3.new(
									speaker.character.HumanoidRootPart.Velocity.X,
									FakeJumpHeight,
									speaker.character.HumanoidRootPart.Velocity.Z
								)
							end
						end
					end
				end)
			else
				SpeedDelayTick = 0
				RunLoops:UnbindFromHeartbeat("AdvancedSpeed")

				if LinearVelocity then
					LinearVelocity:Destroy()
					LinearVelocity = nil
				end
				if BodyVelocity then
					BodyVelocity:Destroy()
					BodyVelocity = nil
				end
			end
		end,
	})
	:AddKeyPicker("KeyPicker", {
		Default = "H",
		SyncToggleState = true,
		Mode = "Toggle",
		Text = "Speed",
		NoUI = false,

		Callback = function(Value) end,
	})

Z0:AddSlider("MySlider", {
	Text = "Speed Value",
	Default = AdvancedSpeedVal,
	Min = 0,
	Max = 500,
	Rounding = 1,
	Compact = false,
	Callback = function(val)
		AdvancedSpeedVal = val
	end,
})

function calculateMoveVector(cameraRelativeMoveVector)
	local c, s
	local _, _, _, R00, R01, R02, _, _, R12, _, _, R22 = Camera.CFrame:GetComponents()
	if R12 < 1 and R12 > -1 then
		c = R22
		s = R02
	else
		c = R00
		s = -R01 * math.sign(R12)
	end
	local norm = math.sqrt(c * c + s * s)
	return Vector3.new(
		(c * cameraRelativeMoveVector.X + s * cameraRelativeMoveVector.Z) / norm,
		0,
		(c * cameraRelativeMoveVector.Z - s * cameraRelativeMoveVector.X) / norm
	)
end

local FlyRaycast = RaycastParams.new()
FlyRaycast.FilterType = Enum.RaycastFilterType.Blacklist
FlyRaycast.RespectCanCollide = true
local FlyJumpCFrame = CFrame.new(0, 0, 0)
local FlyAliveCheck = false
local FlyUp = false
local FlyDown = false
local FlyY = 0
local FlightFloorPart
local w = 0
local s = 0
local a = 0
local d = 0
local FlightConnections = {}

function split(str, delim)
	local broken = {}
	if delim == nil then
		delim = ","
	end
	for w in string.gmatch(str, "[^" .. delim .. "]+") do
		table.insert(broken, w)
	end
	return broken
end

local FlyKeys = "Space/LeftControl"
local FlightWallCheck = true
local FlightVerticalSpeed = 35
local FlightSpeed = 35
local FlightMode = "Bypass"
local FlightState = nil

Z0
	:AddToggle("MyToggle", {
		Text = "Flight",
		Default = false,
		Tooltip = "",
		Callback = function(state)
			if state then
				local FlyPlatformTick = tick() + 0.2
				w = UIS:IsKeyDown(Enum.KeyCode.W) and -1 or 0
				s = UIS:IsKeyDown(Enum.KeyCode.S) and 1 or 0
				a = UIS:IsKeyDown(Enum.KeyCode.A) and -1 or 0
				d = UIS:IsKeyDown(Enum.KeyCode.D) and 1 or 0

				local FlyVDirection = 0
				local FlyUp = false
				local FlyDown = false

				table.insert(
					FlightConnections,
					UIS.InputBegan:Connect(function(input1)
						if UIS:GetFocusedTextBox() ~= nil then
							return
						end
						if input1.KeyCode == Enum.KeyCode.W then
							w = -1
						elseif input1.KeyCode == Enum.KeyCode.S then
							s = 1
						elseif input1.KeyCode == Enum.KeyCode.A then
							a = -1
						elseif input1.KeyCode == Enum.KeyCode.D then
							d = 1
						end
						local divided = FlyKeys:split("/")
						if input1.KeyCode == Enum.KeyCode[divided[1]] then
							FlyUp = true
						elseif input1.KeyCode == Enum.KeyCode[divided[2]] then
							FlyDown = true
						end
					end)
				)
				table.insert(
					FlightConnections,
					UIS.InputEnded:Connect(function(input1)
						local divided = FlyKeys:split("/")
						if input1.KeyCode == Enum.KeyCode.W then
							w = 0
						elseif input1.KeyCode == Enum.KeyCode.S then
							s = 0
						elseif input1.KeyCode == Enum.KeyCode.A then
							a = 0
						elseif input1.KeyCode == Enum.KeyCode.D then
							d = 0
						elseif input1.KeyCode == Enum.KeyCode[divided[1]] then
							FlyUp = false
						elseif input1.KeyCode == Enum.KeyCode[divided[2]] then
							FlyDown = false
						end
					end)
				)

				if FlightMode == "Jump" and isAlive() then
					speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end

				local FlyTP = false
				local FlyTPTick = tick()
				local FlyTPY

				RunLoops:BindToHeartbeat("Fly", function(delta)
					if isAlive() then
						if not FlyY then
							FlyY = speaker.character.HumanoidRootPart.CFrame.p.Y
						end
						local movevec = (FlightMoveMethod == "Manual" and calculateMoveVector(
							Vector3.new(a + d, 0, w + s)
						) or speaker.character.Humanoid.MoveDirection).Unit
						movevec = movevec == movevec and Vector3.new(movevec.X, 0, movevec.Z) or Vector3.zero

						if FlightState ~= "none" then
							if FlightMode == "Velocity" then
								speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType[FlightState])
							end
						end

						if FlightNoVelo == true then
							speaker.Character.HumanoidRootPart.Velocity = Vector3.zero
						end

						if FlightMode == "Velocity" or FlightMode == "Bypass" then
							speaker.character.HumanoidRootPart.Velocity = (movevec * FlightSpeed)
								+ Vector3.new(
									0,
									0.85
										+ (FlightMode == "Bypass" and (tick() % 0.5 > 0.25 and -10 or 10) or 0)
										+ (FlyUp and FlightVerticalSpeed or 0)
										+ (FlyDown and -FlightVerticalSpeed or 0),
									0
								)
						else
							if FlyUp then
								FlyY = FlyY + (FlightVerticalSpeed * delta)
							end
							if FlyDown then
								FlyY = FlyY - (FlightVerticalSpeed * delta)
							end

							local newMovementPosition = (
								movevec * (math.max(FlightSpeed - speaker.character.Humanoid.WalkSpeed, 0) * delta)
							)
							newMovementPosition = Vector3.new(
								newMovementPosition.X,
								(FlyY - speaker.character.HumanoidRootPart.CFrame.p.Y),
								newMovementPosition.Z
							)

							if FlightWallCheck == true then
								FlyRaycast.FilterDescendantsInstances = { speaker.Character, Camera }
								local ray = workspace:Raycast(
									speaker.character.HumanoidRootPart.Position,
									newMovementPosition,
									FlyRaycast
								)
								if ray and ray.Instance.CanCollide then
									newMovementPosition = (ray.Position - speaker.character.HumanoidRootPart.Position)
									FlyY = ray.Position.Y
								end
							end

							if FlightMode == "CFrame" then
								speaker.character.HumanoidRootPart.CFrame = speaker.character.HumanoidRootPart.CFrame
									+ newMovementPosition
							elseif FlightMode == "Jump" then
								speaker.character.HumanoidRootPart.CFrame = speaker.character.HumanoidRootPart.CFrame
									+ Vector3.new(newMovementPosition.X, 0, newMovementPosition.Z)
								if
									speaker.character.HumanoidRootPart.Velocity.Y
									< -(
										speaker.character.Humanoid.JumpPower
										- (
											(FlyUp and FlightVerticalSpeed or 0) - (
												FlyDown and FlightVerticalSpeed or 0
											)
										)
									)
								then
									FlyJumpCFrame = speaker.character.HumanoidRootPart.CFrame
										* CFrame.new(0, -speaker.character.Humanoid.HipHeight, 0)
									speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
								end
							elseif FlightMode == "Teleport" then
								if FlyTPTick <= tick() then
									FlyTP = not FlyTP
									if FlyTP then
										if FlyTPY then
											FlyY = FlyTPY
										end
									else
										FlyTPY = FlyY
										FlyRaycast.FilterDescendantsInstances = { speaker.Character, Camera }
										local ray = workspace:Raycast(
											speaker.character.HumanoidRootPart.Position,
											Vector3.new(0, -10000, 0),
											FlyRaycast
										)
										if ray then
											FlyY = ray.Position.Y
												+ (
													(speaker.character.HumanoidRootPart.Size.Y / 2)
													+ speaker.character.Humanoid.HipHeight
												)
										end
									end
									FlyTPTick = tick() + ((FlyTP and FlightTpOn or FlightTpOff) / 10)
								end
								speaker.character.HumanoidRootPart.CFrame = speaker.character.HumanoidRootPart.CFrame
									+ newMovementPosition
							end

							if FlightFloor == true then
								FlightFloorPart = FlightFloorPart or Instance.new("Part", workspace)
								FlightFloorPart.CanQuery = false
								FlightFloorPart.Anchored = true
								FlightFloorPart.CanCollide = true
								FlightFloorPart.Material = 288
								FlightFloorPart.Color = Library.colors.main
								FlightFloorPart.Size = Vector3.new(3, 0.5, 3)
								FlightFloorPart.CFrame = (
									FlightMode == "Jump" and FlyJumpCFrame
									or speaker.character.HumanoidRootPart.CFrame
										* CFrame.new(
											0,
											-(
													speaker.character.Humanoid.HipHeight
													+ (speaker.character.HumanoidRootPart.Size.Y / 2)
													+ 0.53
												),
											0
										)
								)
								FlightFloorPart.Transparency = 0.5

								if FlyUp or FlyPlatformTick >= tick() then
									speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
								end
							else
								if FlightFloorPart then
									FlightFloorPart:Destroy()
									FlightFloorPart = nil
								end
							end
						end
					else
						FlyY = nil
					end
				end)
			else
				FlyUp = false
				FlyDown = false
				FlyY = nil
				RunLoops:UnbindFromHeartbeat("Fly")
				FlightConnections = {}
				if FlightFloorPart then
					FlightFloorPart:Destroy()
					FlightFloorPart = nil
				end
				speaker.character.Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
			end
		end,
	})
	:AddKeyPicker("KeyPicker", {
		Default = "Y",
		SyncToggleState = true,
		Mode = "Toggle",
		Text = "Flight",
		NoUI = false,

		Callback = function(Value) end,
	})

Z0:AddSlider("MySlider", {
	Text = "Flight Value",
	Default = FlightVerticalSpeed,
	Min = 0,
	Max = 500,
	Rounding = 1,
	Compact = false,
	Callback = function(val)
		FlightVerticalSpeed = val
		FlightSpeed = val
	end,
})

getgenv().critattack = false
getgenv().autolightattack = false

Z1:AddToggle("MyToggle", {
	Text = "Auto Light Attack",
	Default = false,
	Tooltip = "Automatically does light m1 for u",
	Callback = function(value)
		getgenv().autolightattack = value
		if getgenv().autolightattack then
			while getgenv().autolightattack do
				local args = { [1] = "LightAttack" }
				game:GetService("ReplicatedStorage")
					:WaitForChild("Remotes")
					:WaitForChild("ServerCombatHandler")
					:FireServer(unpack(args))
				wait()
			end
		end
	end,
})

Z1:AddToggle("MyToggle", {
	Text = "Auto Crit Attack",
	Default = false,
	Tooltip = "it automatically does critical attack for you",
	Callback = function(value)
		getgenv().critattack = value
		if getgenv().critattack then
			while getgenv().critattack do
				local args = { [1] = "CriticalAttack" }
				game:GetService("ReplicatedStorage")
					:WaitForChild("Remotes")
					:WaitForChild("ServerCombatHandler")
					:FireServer(unpack(args))
				wait()
			end
		end
	end,
})

Z1:AddToggle("AutoEquipToggle", {
	Text = "Auto Equip",
	Default = false,
	Tooltip = "Automatically equips your weapon",
	Callback = function(value)
		getgenv().autoequip = value
		if getgenv().autoequip then
			while getgenv().autoequip do
				local player = game.Players.LocalPlayer -- Initialize player
				if player and player.Character then -- Check if player and the character has loaded
					if player.Character:FindFirstChild("Zanpakuto") then
						player.Character.CharacterHandler.Remotes.Weapon:FireServer("UnsheatheWeapon")
					end
				end
				wait(1) -- Wait for 1 second before rechecking
			end
		end
	end,
})

local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local speaker = game.Players.LocalPlayer
local players = game:GetService("Players")
local PhaseModifiedParts = {}

local RunLoops = {
	RenderStepTable = {},
	StepTable = {},
	UnbindFromRenderStep = function(self, name)
		if self.RenderStepTable[name] then
			self.RenderStepTable[name]:Disconnect()
			self.RenderStepTable[name] = nil
		end
	end,
	BindToStepped = function(self, name, func)
		if self.StepTable[name] == nil then
			self.StepTable[name] = RunService.Stepped:Connect(func)
		end
	end,
	UnbindFromStepped = function(self, name)
		if self.StepTable[name] then
			self.StepTable[name]:Disconnect()
			self.StepTable[name] = nil
		end
	end,
}

Z2:AddButton({
	Text = "Rejoin",
	Func = function()
		game:GetService("TeleportService"):Teleport(game.PlaceId)
	end,
	Tooltip = "Click this button to Rejoin server",
})

Z2:AddButton({
	Text = "ServerHop",
	Func = function()
		local player = game.Players.LocalPlayer
		if not player or not player.Character then
			return
		end
		local characterHandler = player.Character:FindFirstChild("CharacterHandler")
		if not characterHandler then
			return
		end
		local places = {
			[14071822972] = "Wandenreich City",
			[14070029709] = "Soul Society",
			[14069122388] = "Hueco Mundo",
			[14069678431] = "Karakura Town",
			[14069866342] = "Las Noches",
			[14069956183] = "Rukon District",
		}
		local placeId = game.PlaceId
		if places[placeId] then
			for i, v in
				pairs(game:GetService("ReplicatedStorage").Requests.RequestServerList:InvokeServer(places[placeId]))
			do
				if v.JobID ~= game.JobId then
					wait()
					characterHandler.Remotes.ServerListTeleport:FireServer(places[placeId], v.JobID)
					break
				end
			end
		end
	end,
	Tooltip = "Click this button to hop servers",
})

local function ChatLoggerCallback(value)
	print("[cb] Chat Logger toggled:", value)
	if value then
		loadstring(game:HttpGet("https://pastebin.com/raw/R8R5FEuv"))()
	end
end

local ChatLoggerToggle = Z2:AddToggle("Chat Logger", {
	Text = "Chat Logger",
	Default = true,
	Tooltip = "Toggle to enable or disable chat logging",
	Callback = ChatLoggerCallback,
})

ChatLoggerCallback(ChatLoggerToggle.Value)

local modtable = {
	15293648, -- iqcs
	30370774, -- Rakutsu
	83254134, -- s9d
	80916772, -- Jaleox
	23977275, -- Tsumoe
	82280601, -- Lipopss
	83254134, -- s9d
	1506296146, -- okhwan
	606256561, -- Abaddonisu
	18577857, -- DripMonger
	4061168, -- Castalysts
	1159863871, -- enraiton
	432360403, -- sinfuldms
	10712932, -- Yreol
	20660983, -- H3mzz
	83338597, -- LeafyRei
	54066348, -- PioClean
	25329898, -- Joochun
	8925483, -- K1LLUAA
	1161914, -- haniyura
	57431326, -- Khaotxc
	77857290, -- 4Data
	4192362393, -- mitakamora
	300780145, -- invictal
	232346707, -- Drakos
	59903508, -- cartier361
	400349, -- streak
	194177872,
	36989055, -- Minst_r
	380406720, -- MassRelays
	3427072680, -- haniyura
	2793921644, -- MimiTest2
}

local isCheckingMods = false
local isAlreadyChecking = false

local function CheckForMods()
	local playerList = game.Players:GetPlayers()
	for _, player in ipairs(playerList) do
		if table.find(modtable, player.UserId) then
			local notification = Instance.new("Hint")
			notification.Text = "A moderator  has been spotted in your server.You will be kicked in 5 seconds."
			notification.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
			wait(5)
			local kickMessage = "A moderator has been spotted in your server. You have been kicked."
			game.Players.LocalPlayer:Kick(kickMessage) -- Kick the local player with the specified message
		end
	end
end

local function CheckModsPeriodically()
	if isAlreadyChecking then
		return
	end
	isAlreadyChecking = true
	while isCheckingMods do
		CheckForMods()
		wait(1)
	end
	isAlreadyChecking = false
end

local AntiModToggle = Z2:AddToggle("Anti Mod", {
	Text = "Anti Mod",
	Default = false,
	Tooltip = "Toggle to enable or disable anti moderator feature",
	Callback = function(enabled)
		isCheckingMods = enabled
		if enabled then
			CheckForMods()
			CheckModsPeriodically()
		end
	end,
})

if AntiModToggle.Value then
	isCheckingMods = true
	CheckForMods()
	CheckModsPeriodically()
end

local function InstantReset()
	local player = game.Players.LocalPlayer
	if not player or not player.Character then
		return
	end

	player.Character.Head:Destroy()
end

Z2:AddButton({
	Text = "Instant Reset",
	Func = function()
		InstantReset()
	end,
	Tooltip = "instantly reset your character works only on humanoid",
})

local function DestroyKillbricks()
	local parts = workspace:GetDescendants()

	for _, part in ipairs(parts) do
		if part:IsA("Part") and part.Name == "Killbrick" then
			part:Destroy()
		end
	end
end

Z2:AddButton({
	Text = "Remove Killbricks",
	Func = function()
		DestroyKillbricks()
	end,
	Tooltip = "it remove all Killbricks from the map",
})

Z2:AddDivider()


local args = {
    [1] = "W"
}

local isAutoDashEnabled = false

local toggleCallbackAutoDash = function(value)
    isAutoDashEnabled = value
end

local function PerformAutoDash()
    while true do
        if isAutoDashEnabled then
            game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Dash:FireServer(unpack(args))
        end
        wait() 
    end
end

Z2:AddToggle("AutoDash", {
    Text = "Auto Dash",
    Default = false,
    Tooltip = "Automatically dash for you",
    Callback = toggleCallbackAutoDash,
})

coroutine.wrap(PerformAutoDash)()


local args = {
    [1] = "Pressed"
}

local isAutoFlashstepEnabled = false

local toggleCallbackAutoFlashstep = function(value)
    isAutoFlashstepEnabled = value
end

local function PerformAutoFlashstep()
    while true do
        if isAutoFlashstepEnabled then
            game:GetService("Players").LocalPlayer.Character.CharacterHandler.Remotes.Flashstep:FireServer(unpack(args))
        end
        wait() 
    end
end

Z2:AddToggle("AutoFlashstep", {
    Text = "Auto Flashstep",
    Default = false,
    Tooltip = "Automatically Flashsteps for you",
    Callback = toggleCallbackAutoFlashstep,
})

coroutine.wrap(PerformAutoFlashstep)()



Z2:AddToggle("MyToggle", {
	Text = "Noclip",
	Default = false,
	Tooltip = "it makes your player able to noclip",

	Callback = function(state)
		if state then
			RunLoops:BindToStepped("NoclipAround", function()
				local chars = { Camera, speaker.Character }
				for i, v in pairs(players:GetPlayers()) do
					table.insert(chars, v.Character)
				end

				local rootpos = speaker.character.HumanoidRootPart.CFrame.p
				local region = Region3.new(rootpos - Vector3.new(2, 2, 2), rootpos + Vector3.new(2, 2, 2))

				local parts = workspace:FindPartsInRegion3(region, nil, math.huge)

				for i, v in pairs(parts) do
					if
						v.CanCollide
						and (v.Position.Y + (v.Size.Y / 2)) > (rootpos.Y - speaker.character.Humanoid.HipHeight)
					then
						PhaseModifiedParts[v] = true
						v.CanCollide = false
					end
				end
				for i, v in pairs(PhaseModifiedParts) do
					if not table.find(parts, i) then
						PhaseModifiedParts[i] = nil
						i.CanCollide = true
					end
				end
			end)
		else
			RunLoops:UnbindFromStepped("NoclipAround")
			for i, v in pairs(PhaseModifiedParts) do
				if i then
					i.CanCollide = true
				end
			end
			table.clear(PhaseModifiedParts)
		end
	end,
})

function randomString()
	local length = math.random(10, 20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

function randomString()
	local length = math.random(10, 20)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

local bodyAngularVelocities = {}
flinging = false
Z2:AddToggle("MyToggle", {
	Text = "Fling",
	Default = false,
	Tooltip = "it makes your player able to Fling people",

	Callback = function(state)
		flinging = state
		if flinging then
			for _, part in ipairs(game.Players.LocalPlayer.Character:GetChildren()) do
				if part:IsA("BasePart") then
					local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
					bodyAngularVelocity.AngularVelocity = Vector3.new(0, 99999999, 0)
					bodyAngularVelocity.Parent = part
					table.insert(bodyAngularVelocities, bodyAngularVelocity)
				end
			end
		else
			for _, bodyAngularVelocity in ipairs(bodyAngularVelocities) do
				bodyAngularVelocity:Remove()
			end
			bodyAngularVelocities = {}
		end
	end,
})

Z2:AddToggle("MyToggle", {
	Text = "Minigame Simplfiier",
	Default = false,
	Tooltip = "Simplifies Minigames",
	Callback = function(state)
		Settings.Minigame = state
	end,
})

Z2:AddToggle("MyToggle", {
	Text = "Complete Res Obby",
	Default = false,
	Tooltip = "Lol as the title states",
	Callback = function(state)
	Settings.Obby = state
	end,
})

local mobTable = { "Fishbone", "Frisker", "LostSoul", "Jackal", "Shinigami", "Menos", "Bawabawa", "Jidanbo" }

Z3:AddDropdown("MyDropdown", {
	Values = mobTable,
	Default = mobTable[1],
	Multi = false,
	Text = "Farm Mob",
	Tooltip = "Select the mob for farming",
	Callback = function(Value)
		Settings.Farms.Selectedmob = Value
	end,
})

Z3:AddSlider("MySlider", {
	Text = "Farm Position",
	Default = 0,
	Min = -50,
	Max = 50,
	Rounding = 1,
	Compact = false,
	Callback = function(val)
		Settings.Autoquest.Position = val
        Settings2.Farms.Position = val
        Settings.Farms.Position = val
	Settings.Adjfarm.Position = val
	end,
})
Z3:AddSlider("MySlider", {
	Text = "Tween Speed",
	Default = 0,
	Min = 0,
	Max = 250,
	Rounding = 1,
	Compact = false,
	Callback = function(val)
		Settings.Farms.TweenSpeed = val
	end,
})

local player = game.Players.LocalPlayer
local TweenService = game:GetService("TweenService")

getgenv().autofarm = false
getgenv().tweenSpeed = 0
getgenv().farmPosition = Vector3.new(0, 0, 0)

local function PerformAutoFarm()
	while getgenv().autofarm do
		local mob = nil
		local closestDistance = math.huge

		for _, v in ipairs(workspace:GetChildren()) do
			if selectedmob and string.find(v.Name, selectedmob) and v.Humanoid.Health > 0 then
				local distance = (v.PrimaryPart.Position - getgenv().farmPosition).Magnitude
				if distance < closestDistance then
					mob = v
					closestDistance = distance
				end
			end
		end

		if mob then
			local targetPosition = mob.PrimaryPart.Position

			local direction = (targetPosition - player.Character.HumanoidRootPart.Position).Unit
			local destinationPosition = targetPosition - direction * 3

			local distance = (destinationPosition - player.Character.HumanoidRootPart.Position).Magnitude
			local time = distance / (getgenv().tweenSpeed > 0 and getgenv().tweenSpeed or 45)

			local tweenInfo = TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)

			local tween = TweenService:Create(
				player.Character.HumanoidRootPart,
				tweenInfo,
				{ CFrame = CFrame.new(destinationPosition) }
			)

			tween:Play()
			tween.Completed:Wait()

			if not getgenv().autofarm then
				break
			end
		end
		wait(0.1)
	end
end

local toggleCallback = function(value)
	getgenv().autofarm = value
	if getgenv().autofarm then
		coroutine.wrap(PerformAutoFarm)()
	end
end

Z3:AddToggle("MyToggle", {
	Text = "Loot Farm",
	Default = false,
	Tooltip = "Starts the auto farm",
	Callback = function(state)
		Settings.Farms.LootFarm = state
	end,
})

Z3:AddToggle("MyToggle", {
	Text = "Mob Farm",
	Default = false,
	Tooltip = "Starts the auto farm",
	Callback = function(state)
		Settings.Farms.MobFarm = state
	end,
})


Z3:AddToggle("MyToggle", {
    Text = "Auto Eat/Execute",
    Default = false,
    Tooltip = "Eats/Executes Lol # balls",
    Callback = function(state)
getgenv().AutoEat = state
print(getgenv().AutoEat)
    end,
})

Z3:AddToggle("MyToggle", {
	Text = "Auto Quest",
	Default = false,
	Tooltip = "Starts the auto farm",
	Callback = function(state)
		Settings.Autoquest.Toggle = state
	end,
})

Z3:AddToggle("MyToggle", {
	Text = "Adju Farm",
	Default = false,
	Tooltip = "Farms Adju",
	Callback = function(state)
		Settings.Adjfarm.Toggle = state
	end,
})

local Players = game:GetService("Players")
local playerNames = {}

for i, player in ipairs(Players:GetPlayers()) do
	table.insert(playerNames, player.Name)
end

Z3:AddDropdown("MyDropdown", {
	Values = playerNames,
	Default = playerNames[1],
	Multi = false,
	Text = "Player",
	Tooltip = "Select the player for farming",
	Callback = function(Value)
		for i, player in ipairs(Players:GetPlayers()) do
			table.insert(playerNames, player.Name)
		end
		Settings2.Farms.Selectedmob = Value
	end,
})

Z3:AddToggle("MyToggle", {
	Text = "Player Farm",
	Default = false,
	Tooltip = "Starts the auto farm",
	Callback = function(state)
		Settings2.Farms.MobFarm = state
	end,
})

Library:SetWatermarkVisibility(true)

FrameTimer = tick()
FrameCounter = 0
FPS = 60

local WatermarkConnection = game:GetService("RunService").RenderStepped:Connect(function()
	FrameCounter += 1

	if (tick() - FrameTimer) >= 1 then
		FPS = FrameCounter
		FrameTimer = tick()
		FrameCounter = 0
	end

	Library:SetWatermark(
		("Drowned Hub | %s fps | %s ms"):format(
			math.floor(FPS),
			math.floor(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue())
		)
	)
end)

Library.KeybindFrame.Visible = true

Library:OnUnload(function()
	WatermarkConnection:Disconnect()
	print("Unloaded!")
	Library.Unloaded = true
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:BuildConfigSection(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
game:GetService("RunService").Heartbeat:connect(function()
	autoquest()
	MobFarm()
	adjufarm()
	autoequip()
	farmclosest()
	obby()
	minigame()
	MobFarm2()
	LootBoxFarm()
end)
